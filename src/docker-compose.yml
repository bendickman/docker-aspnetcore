version: '3.4'

networks:
  dockeraspnetcoreweb-dev:
    driver: bridge

services:
  docker.aspnetcore.web:
    container_name: docker_aspnetcore_web
    image: ${DOCKER_REGISTRY-}dockeraspnetcoreweb
    ports:
      - 51567:443
    depends_on:
      - "postgres_image"
      - "redis_cache"
    links:
      - "redis_cache"
    build:
      context: .
      dockerfile: Docker.AspNetCore.Web/Dockerfile
    environment:
      DB_CONNECTION_STRING: "host=postgres_image;port=5432;database=blogdb;username=bloguser;password=bloguser"
      REDIS_CONNECTION_STRING: "redis_cache:6379,abortConnect=False"
      NODE_ENV: production
    networks:
      - dockeraspnetcoreweb-dev

  postgres_image:
    container_name: postgres_db
    image: postgres:latest
    ports:
      - "5432"
    restart: always
    volumes:
      - ./Docker.AspNetCore.Web/db_volume:/var/lib/postgresql/data
      - ./Docker.AspNetCore.Web/dbscripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: "bloguser"
      POSTGRES_PASSWORD: "bloguser"
      POSTGRES_DB: "blogdb"
    networks:
      - dockeraspnetcoreweb-dev

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    ports:
     - 9200:9200
    volumes:
     - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
     - xpack.monitoring.enabled=true
     - xpack.watcher.enabled=false
     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
     - discovery.type=single-node
    networks:
     - dockeraspnetcoreweb-dev
 
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.6.2
    ports:
     - 5601:5601
    depends_on:
     - elasticsearch
    environment:
     - ELASTICSEARCH_URL=http://localhost:9200
    networks:
     - dockeraspnetcoreweb-dev

  redis_cache:
    container_name: redis_cache
    image: redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=my-password
      - REDIS_PORT=6379
      - REDIS_DATABASES=16

volumes:
  elasticsearch-data: